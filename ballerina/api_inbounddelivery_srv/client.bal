// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

import ballerina/http;
import ballerinax/sap;

# This service enables you to create, read, update and delete inbound deliveries. It can be consumed in Fiori apps and on other user interfaces.
public isolated client class Client {
    final sap:Client clientEp;

    # Gets invoked to initialize the `connector`.
    #
    # + config - The configurations to be used when initializing the `connector` 
    # + serviceUrl - URL of the target service 
    # + return - An error if connector initialization failed 
    public isolated function init(ConnectionConfig config, string hostname, int port = 443) returns error? {
        string serviceUrl = string `https://${hostname}:${port}/sap/opu/odata/sap/API_INBOUND_DELIVERY_SRV;v=0002`;
        http:ClientConfiguration httpClientConfig = {auth: config.auth, httpVersion: config.httpVersion, timeout: config.timeout, forwarded: config.forwarded, poolConfig: config.poolConfig, compression: config.compression, circuitBreaker: config.circuitBreaker, retryConfig: config.retryConfig, validation: config.validation};
        do {
            if config.http1Settings is ClientHttp1Settings {
                ClientHttp1Settings settings = check config.http1Settings.ensureType(ClientHttp1Settings);
                httpClientConfig.http1Settings = {...settings};
            }
            if config.http2Settings is http:ClientHttp2Settings {
                httpClientConfig.http2Settings = check config.http2Settings.ensureType(http:ClientHttp2Settings);
            }
            if config.cache is http:CacheConfig {
                httpClientConfig.cache = check config.cache.ensureType(http:CacheConfig);
            }
            if config.responseLimits is http:ResponseLimitConfigs {
                httpClientConfig.responseLimits = check config.responseLimits.ensureType(http:ResponseLimitConfigs);
            }
            if config.secureSocket is http:ClientSecureSocket {
                httpClientConfig.secureSocket = check config.secureSocket.ensureType(http:ClientSecureSocket);
            }
            if config.proxy is http:ProxyConfig {
                httpClientConfig.proxy = check config.proxy.ensureType(http:ProxyConfig);
            }
        }
        sap:Client httpEp = check new (serviceUrl, httpClientConfig);
        self.clientEp = httpEp;
        return;
    }

    # Creates inbound deliveries with reference to preceding document.
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createA_InbDeliveryHeader(CreateA_InbDeliveryHeader payload, map<string|string[]> headers = {}) returns A_InbDeliveryHeader_1|error {
        string resourcePath = string `/A_InbDeliveryHeader`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Adds serial number to inbound delivery item.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    remote isolated function createAddSerialNumberToDeliveryItem(map<string|string[]> headers = {}, *CreateAddSerialNumberToDeliveryItemQueries queries) returns Wrapper|error {
        string resourcePath = string `/AddSerialNumberToDeliveryItem`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Confirms putaway quantity of inbound delivery items.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    remote isolated function createConfirmPutawayAllItems(map<string|string[]> headers = {}, *CreateConfirmPutawayAllItemsQueries queries) returns Wrapper|error {
        string resourcePath = string `/ConfirmPutawayAllItems`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Confirms putaway quantity of inbound delivery item.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    remote isolated function createConfirmPutawayOneItem(map<string|string[]> headers = {}, *CreateConfirmPutawayOneItemQueries queries) returns Wrapper|error {
        string resourcePath = string `/ConfirmPutawayOneItem`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates an additional batch split item for an inbound delivery item.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    remote isolated function createCreateBatchSplitItem(map<string|string[]> headers = {}, *CreateCreateBatchSplitItemQueries queries) returns CreatedDeliveryItem_1|error {
        string resourcePath = string `/CreateBatchSplitItem`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Deletes all serial numbers from inbound delivery item.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    remote isolated function createDeleteAllSerialNumbersFromDeliveryItem(map<string|string[]> headers = {}, *CreateDeleteAllSerialNumbersFromDeliveryItemQueries queries) returns Wrapper|error {
        string resourcePath = string `/DeleteAllSerialNumbersFromDeliveryItem`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Deletes serial number from inbound delivery item.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    remote isolated function createDeleteSerialNumberFromDeliveryItem(map<string|string[]> headers = {}, *CreateDeleteSerialNumberFromDeliveryItemQueries queries) returns Wrapper|error {
        string resourcePath = string `/DeleteSerialNumberFromDeliveryItem`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Posts goods receipt for inbound delivery.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    remote isolated function createPostGoodsReceipt(map<string|string[]> headers = {}, *CreatePostGoodsReceiptQueries queries) returns Wrapper|error {
        string resourcePath = string `/PostGoodsReceipt`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Takes over delivery quantity as putaway quantity for all inbound delivery items.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    remote isolated function createPutawayAllItems(map<string|string[]> headers = {}, *CreatePutawayAllItemsQueries queries) returns Wrapper|error {
        string resourcePath = string `/PutawayAllItems`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Takes over delivery quantity as putaway quantity for specified inbound delivery item.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    remote isolated function createPutawayOneItem(map<string|string[]> headers = {}, *CreatePutawayOneItemQueries queries) returns Wrapper|error {
        string resourcePath = string `/PutawayOneItem`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Sets putaway quantity and delivery quantity for inbound delivery item.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    remote isolated function createPutawayOneItemWithBaseQuantity(map<string|string[]> headers = {}, *CreatePutawayOneItemWithBaseQuantityQueries queries) returns Wrapper|error {
        string resourcePath = string `/PutawayOneItemWithBaseQuantity`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Sets putaway quantity and delivery quantity for inbound delivery item.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    remote isolated function createPutawayOneItemWithSalesQuantity(map<string|string[]> headers = {}, *CreatePutawayOneItemWithSalesQuantityQueries queries) returns Wrapper|error {
        string resourcePath = string `/PutawayOneItemWithSalesQuantity`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Reverses goods receipt for inbound delivery.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    remote isolated function createReverseGoodsReceipt(map<string|string[]> headers = {}, *CreateReverseGoodsReceiptQueries queries) returns Wrapper_1|error {
        string resourcePath = string `/ReverseGoodsReceipt`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Sets putaway quantity in base unit of measure for delivery item.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    remote isolated function createSetPutawayQuantityWithBaseQuantity(map<string|string[]> headers = {}, *CreateSetPutawayQuantityWithBaseQuantityQueries queries) returns Wrapper|error {
        string resourcePath = string `/SetPutawayQuantityWithBaseQuantity`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Deletes inbound deliveries.
    #
    # + DeliveryDocument - Delivery
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteA_InbDeliveryHeader(string DeliveryDocument, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_InbDeliveryHeader('${getEncodedUri(DeliveryDocument)}')`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Deletes inbound delivery items.
    #
    # + DeliveryDocument - Delivery
    # + DeliveryDocumentItem - Item
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteA_InbDeliveryItem(string DeliveryDocument, string DeliveryDocumentItem, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_InbDeliveryItem(DeliveryDocument='${getEncodedUri(DeliveryDocument)}',DeliveryDocumentItem='${getEncodedUri(DeliveryDocumentItem)}')`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Reads inbound delivery document flows by key.
    #
    # + PrecedingDocument - Preceding Doc.
    # + PrecedingDocumentItem - Preceding Item
    # + SubsequentDocumentCategory - Subs.Doc.Categ.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_InbDeliveryDocFlow(string PrecedingDocument, string PrecedingDocumentItem, string SubsequentDocumentCategory, map<string|string[]> headers = {}, *GetA_InbDeliveryDocFlowQueries queries) returns A_InbDeliveryDocFlowWrapper|error {
        string resourcePath = string `/A_InbDeliveryDocFlow(PrecedingDocument='${getEncodedUri(PrecedingDocument)}',PrecedingDocumentItem='${getEncodedUri(PrecedingDocumentItem)}',SubsequentDocumentCategory='${getEncodedUri(SubsequentDocumentCategory)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads inbound delivery headers.
    #
    # + DeliveryDocument - Delivery
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_InbDeliveryHeader(string DeliveryDocument, map<string|string[]> headers = {}, *GetA_InbDeliveryHeaderQueries queries) returns A_InbDeliveryHeaderWrapper|error {
        string resourcePath = string `/A_InbDeliveryHeader('${getEncodedUri(DeliveryDocument)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads inbound delivery items.
    #
    # + DeliveryDocument - Delivery
    # + DeliveryDocumentItem - Item
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_InbDeliveryItem(string DeliveryDocument, string DeliveryDocumentItem, map<string|string[]> headers = {}, *GetA_InbDeliveryItemQueries queries) returns A_InbDeliveryItemWrapper|error {
        string resourcePath = string `/A_InbDeliveryItem(DeliveryDocument='${getEncodedUri(DeliveryDocument)}',DeliveryDocumentItem='${getEncodedUri(DeliveryDocumentItem)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads addresses of specific inbound delivery partner.
    #
    # + PartnerFunction - Partner Functn
    # + SDDocument - SD Document
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getAddressOfA_InbDeliveryPartner(string PartnerFunction, string SDDocument, map<string|string[]> headers = {}, *GetAddressOfA_InbDeliveryPartnerQueries queries) returns A_InbDeliveryAddressWrapper|error {
        string resourcePath = string `/A_InbDeliveryPartner(PartnerFunction='${getEncodedUri(PartnerFunction)}',SDDocument='${getEncodedUri(SDDocument)}')/to_Address`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads maintenance item object lists of specific inbound delivery item.
    #
    # + DeliveryDocument - Delivery
    # + DeliveryDocumentItem - Item
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getSerialDeliveryItemOfA_InbDeliveryItem(string DeliveryDocument, string DeliveryDocumentItem, map<string|string[]> headers = {}, *GetSerialDeliveryItemOfA_InbDeliveryItemQueries queries) returns A_InbDeliverySerialNmbrWrapper|error {
        string resourcePath = string `/A_InbDeliveryItem(DeliveryDocument='${getEncodedUri(DeliveryDocument)}',DeliveryDocumentItem='${getEncodedUri(DeliveryDocumentItem)}')/to_SerialDeliveryItem`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads inbound delivery headers.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_InbDeliveryHeaders(map<string|string[]> headers = {}, *ListA_InbDeliveryHeadersQueries queries) returns CollectionOfA_InbDeliveryHeaderWrapper|error {
        string resourcePath = string `/A_InbDeliveryHeader`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads inbound delivery items.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_InbDeliveryItems(map<string|string[]> headers = {}, *ListA_InbDeliveryItemsQueries queries) returns CollectionOfA_InbDeliveryItemWrapper|error {
        string resourcePath = string `/A_InbDeliveryItem`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads texts of specific inbound delivery item.
    #
    # + DeliveryDocument - Delivery
    # + DeliveryDocumentItem - Item
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listDeliveryDocumentItemTextsOfA_InbDeliveryItem(string DeliveryDocument, string DeliveryDocumentItem, map<string|string[]> headers = {}, *ListDeliveryDocumentItemTextsOfA_InbDeliveryItemQueries queries) returns CollectionOfA_InbDeliveryItemTextWrapper|error {
        string resourcePath = string `/A_InbDeliveryItem(DeliveryDocument='${getEncodedUri(DeliveryDocument)}',DeliveryDocumentItem='${getEncodedUri(DeliveryDocumentItem)}')/to_DeliveryDocumentItemText`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads items of specific inbound delivery header.
    #
    # + DeliveryDocument - Delivery
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listDeliveryDocumentItemsOfA_InbDeliveryHeader(string DeliveryDocument, map<string|string[]> headers = {}, *ListDeliveryDocumentItemsOfA_InbDeliveryHeaderQueries queries) returns CollectionOfA_InbDeliveryItemWrapper|error {
        string resourcePath = string `/A_InbDeliveryHeader('${getEncodedUri(DeliveryDocument)}')/to_DeliveryDocumentItem`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads partners of specific inbound delivery header.
    #
    # + DeliveryDocument - Delivery
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listDeliveryDocumentPartnersOfA_InbDeliveryHeader(string DeliveryDocument, map<string|string[]> headers = {}, *ListDeliveryDocumentPartnersOfA_InbDeliveryHeaderQueries queries) returns CollectionOfA_InbDeliveryPartnerWrapper|error {
        string resourcePath = string `/A_InbDeliveryHeader('${getEncodedUri(DeliveryDocument)}')/to_DeliveryDocumentPartner`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads texts of specific inbound delivery header.
    #
    # + DeliveryDocument - Delivery
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listDeliveryDocumentTextsOfA_InbDeliveryHeader(string DeliveryDocument, map<string|string[]> headers = {}, *ListDeliveryDocumentTextsOfA_InbDeliveryHeaderQueries queries) returns CollectionOfA_InbDeliveryHeaderTextWrapper|error {
        string resourcePath = string `/A_InbDeliveryHeader('${getEncodedUri(DeliveryDocument)}')/to_DeliveryDocumentText`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads document flows of specific inbound delivery item.
    #
    # + DeliveryDocument - Delivery
    # + DeliveryDocumentItem - Item
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listDocumentFlowsOfA_InbDeliveryItem(string DeliveryDocument, string DeliveryDocumentItem, map<string|string[]> headers = {}, *ListDocumentFlowsOfA_InbDeliveryItemQueries queries) returns CollectionOfA_InbDeliveryDocFlowWrapper|error {
        string resourcePath = string `/A_InbDeliveryItem(DeliveryDocument='${getEncodedUri(DeliveryDocument)}',DeliveryDocumentItem='${getEncodedUri(DeliveryDocumentItem)}')/to_DocumentFlow`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads maintenance item objects of specific inbound delivery maintenance item object list.
    #
    # + MaintenanceItemObjectList - Object list
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listMaintenanceItemObjectsOfA_InbDeliverySerialNmbr(string MaintenanceItemObjectList, map<string|string[]> headers = {}, *ListMaintenanceItemObjectsOfA_InbDeliverySerialNmbrQueries queries) returns CollectionOfA_MaintenanceItemObjListWrapper|error {
        string resourcePath = string `/A_InbDeliverySerialNmbr(${getEncodedUri(MaintenanceItemObjectList)})/to_MaintenanceItemObject`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Updates inbound delivery document flows.
    #
    # + PrecedingDocument - Preceding Doc.
    # + PrecedingDocumentItem - Preceding Item
    # + SubsequentDocumentCategory - Subs.Doc.Categ.
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function patchA_InbDeliveryDocFlow(string PrecedingDocument, string PrecedingDocumentItem, string SubsequentDocumentCategory, Modified\ A_InbDeliveryDocFlowType payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_InbDeliveryDocFlow(PrecedingDocument='${getEncodedUri(PrecedingDocument)}',PrecedingDocumentItem='${getEncodedUri(PrecedingDocumentItem)}',SubsequentDocumentCategory='${getEncodedUri(SubsequentDocumentCategory)}')`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, headers);
    }

    # Updates inbound delivery headers.
    #
    # + DeliveryDocument - Delivery
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function patchA_InbDeliveryHeader(string DeliveryDocument, Modified\ A_InbDeliveryHeaderType payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_InbDeliveryHeader('${getEncodedUri(DeliveryDocument)}')`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, headers);
    }

    # Updates inbound delivery items.
    #
    # + DeliveryDocument - Delivery
    # + DeliveryDocumentItem - Item
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function patchA_InbDeliveryItem(string DeliveryDocument, string DeliveryDocumentItem, Modified\ A_InbDeliveryItemType payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_InbDeliveryItem(DeliveryDocument='${getEncodedUri(DeliveryDocument)}',DeliveryDocumentItem='${getEncodedUri(DeliveryDocumentItem)}')`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, headers);
    }

    # Send a group of requests
    #
    # + headers - Headers to be sent with the request 
    # + request - Batch request 
    # + return - Batch response 
    remote isolated function performBatchOperation(http:Request request, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/$batch`;
        // TODO: Update the request as needed;
        return self.clientEp->post(resourcePath, request, headers);
    }
}
